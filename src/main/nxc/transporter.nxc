#define P 1.3
#define I 0.001
#define D 20
#define POWERMID 50
#define BLACK 50
#define BALANCETIME 300
#define USDISTANCE 30
#define POWERLIMIT 100

#define RIGHT -100
#define LEFT 100
#define MOTORS OUT_BC
#define LEFTMOTOR OUT_B
#define RIGHTMOTOR OUT_C
#define LIGHTLEFT IN_1
#define LIGHTRIGHT IN_2
//#define USLEFT IN_3
//#define USRIGHT IN_4

int x,y,delta,powerLeft,powerRight,power,integral,deltaOld;
bool isCompleted = true;
mutex sync;

// 5 - forward
// 6 - right
// 7 - backward
// 8 - left

// 2 - stay
// 3 - drop

// 9 - isComplete


void PID(){
  x=Sensor(LIGHTLEFT);
  y=Sensor(LIGHTRIGHT);
  
  delta=x-y;

  power=delta*P+integral*I+(delta-deltaOld)*D;

  powerLeft=POWERMID+power;
  powerRight=POWERMID-power;

  if(powerLeft>POWERLIMIT){powerLeft=POWERLIMIT;}
  if(powerLeft<-POWERLIMIT){powerLeft=-POWERLIMIT;}
  if(powerRight>POWERLIMIT){powerRight=POWERLIMIT;}
  if(powerRight<-POWERLIMIT){powerRight=-POWERLIMIT;}

  OnFwd(LEFTMOTOR,powerLeft);
  OnFwd(RIGHTMOTOR,powerRight);

  deltaOld=delta;
  integral+=delta;
}

void PIDBackward() {
  x=Sensor(LIGHTLEFT);
  y=Sensor(LIGHTRIGHT);

  delta=x-y;

  power=delta*P+integral*I+(delta-deltaOld)*D;

  powerLeft=POWERMID+power;
  powerRight=POWERMID-power;

  if(powerLeft>POWERLIMIT){powerLeft=POWERLIMIT;}
  if(powerLeft<-POWERLIMIT){powerLeft=-POWERLIMIT;}
  if(powerRight>POWERLIMIT){powerRight=POWERLIMIT;}
  if(powerRight<-POWERLIMIT){powerRight=-POWERLIMIT;}

  OnRev(LEFTMOTOR,powerLeft);
  OnRev(RIGHTMOTOR,powerRight);

  deltaOld=delta;
  integral+=delta;
}

void Line(){
  Acquire(sync);
  isCompleted = false;
  Release(sync);
  
  while(1){
    //stop when we find black cross
    if(Sensor(LIGHTLEFT)<BLACK && Sensor(LIGHTRIGHT)<BLACK){break;}
    
    PID();
  }
  
  Off(MOTORS);
  PlayTone(500,100);
  
  RotateMotor(MOTORS,POWERMID,60);//move slight forward to skip black cross
  
  Acquire(sync);
  isCompleted = true;
  Release(sync);
}

void Stabilize(){
  //follow line for BALANCETIME period
  long time=CurrentTick();
  while(CurrentTick()-time<BALANCETIME){
    PID();
  }

  //and then go back
  time=CurrentTick();
  while(CurrentTick()-time<BALANCETIME){
    OnFwd(MOTORS,-POWERMID);
  }

  Off(MOTORS);
}

void Right(){
  Acquire(sync);
  isCompleted = false;
  Release(sync);
  
  RotateMotorEx(MOTORS, POWERMID, 190, LEFT, true, true);//turn right
  //Stabilize();
  PlayTone(600,100);
}

void Left(){
  Acquire(sync);
  isCompleted = false;
  Release(sync);
  
  RotateMotorEx(MOTORS, POWERMID, 190, RIGHT, true, true);//turn left
  //Stabilize();
  PlayTone(700,100);
}

void Back(){
  Acquire(sync);
  isCompleted = false;
  Release(sync);
  
  long time = CurrentTick();
  OnRev(MOTORS,powerLeft);
  while(CurrentTick()-time<500) { }
  Off(MOTORS);

  RotateMotorEx(MOTORS, POWERMID, 185, LEFT, true, true);//turn left
  RotateMotorEx(MOTORS, POWERMID, 185, LEFT, true, true);//turn left
  Stabilize();
  PlayTone(700,100);
}

void init(){
  SetSensorLight(LIGHTLEFT);
  SetSensorLight(LIGHTRIGHT);
//  SetSensorUltrasonic(USLEFT);
//  SetSensorUltrasonic(USRIGHT);
  
  integral=0;
  deltaOld=0;
}
/*
task LeftHand(){
  Line();
  while(true){
    if(SensorUS(USLEFT)<USDISTANCE){//есть препятствие слева
      Right();
    }else{//нет препятствия слева
      Left();
      Line();
    }
  }
}

task RightHand(){
  Line();
  while(true){
    if(SensorUS(USRIGHT)<USDISTANCE){//есть препятствие справа
      Left();
    }else{//нет препятствия справа
      Right();
      Line();
    }
  }
}
*/
task waitForBtConnection()
{
  TextOut(0, LCD_LINE1, "Waiting");
  while(1)
  {
    long value = -1;
    ReceiveRemoteNumber(MAILBOX1, 1, value);
    Wait(500);
    switch(value)
    {
      case 5:
        PlayTone(700,100);
        Line();
        break;
      case 6:
        PlayTone(700,100);
        Right();
        Line();
        break;
      case 7:
        PlayTone(700,100);
        Back();
        Line();
        break;
      case 8:
        PlayTone(700,100);
        Left();
        Line();
        break;
      case 9:
        Acquire(sync);
        if (isCompleted)
        {
          byte answer[1] = {5};
          string answerStr = ByteArrayToStr(answer);
          SendRemoteString(0, MAILBOX1, answerStr);
        }
        else
        {
          byte answer[1] = {6};
          string answerStr = ByteArrayToStr(answer);
          SendRemoteString(0, MAILBOX1, answerStr);
        }
        Release(sync);
        break;
    }
  }
}

task main(){
  init();
  //StartTask(LeftHand);
  StartTask(waitForBtConnection);
  //StartTask(RightHand);
}


