#include "NXCDefs.h"

#define BUTTON IN_1
#define TUBE_COLOR IN_3
#define COLOR IN_4

byte numbersOfBalls[4] = {0, 0, 0, 0};
mutex sync;

void Start() {
  until(Sensor(BUTTON) == 1);

  OnFwd(OUT_B,-30);
  OnFwd(OUT_C, 30);
  until(Sensor(TUBE_COLOR) < 60);
  Off(OUT_BC);
}

void rotateTubeBackward() {
  RotateMotorEx(OUT_BC, -60, 180, -100, true, true);
  
  OnFwd(OUT_B, 30);
  OnFwd(OUT_C, -30);
  until(Sensor(TUBE_COLOR) < 80);
  Off(OUT_BC);
}

void rotateTubeForward() {
  RotateMotorEx(OUT_BC, -60, 180, 100, true, true);

  OnFwd(OUT_B, -30);
  OnFwd(OUT_C, 30);
  until(Sensor(TUBE_COLOR) < 80);
  Off(OUT_BC);
}

void dropBall(int delay) {
  RotateMotor(OUT_A, -35, 360);
  Wait(delay);
}

task waitForBtConnection() {
  TextOut(0, LCD_LINE1, "Waiting");
  while(1)
  {
    long value = -1;
    ReceiveRemoteNumber(MAILBOX1, 1, value);
    Wait(500);
    if (value == 3)
    {
      Acquire(sync);
      string answer = ByteArrayToStr(numbersOfBalls);
      SendRemoteString(0, MAILBOX1, answer);
      numbersOfBalls[0] = 0;
      numbersOfBalls[1] = 0;
      numbersOfBalls[2] = 0;
      numbersOfBalls[3] = 0;
      Release(sync);

    }
  }
}

task main() {
  SetSensorTouch(BUTTON);
  SetSensorLight(TUBE_COLOR);
  SetSensorColorFull(COLOR);

  StartTask(waitForBtConnection);
  //Start();
  
  int gde = 0;

  while(true) {
    int kuda = -1;
    while(kuda == -1)
    {
      switch(Sensor(COLOR)) {
        case 2:
          TextOut(0, LCD_LINE1, "1");
          kuda = 0;
          break;
        case 5:
          TextOut(0, LCD_LINE1, "2");
          kuda = 1;
          break;
        case 3:
          TextOut(0, LCD_LINE1, "3");
          kuda = 2;
          break;
        case 6:
          TextOut(0, LCD_LINE1, "4");
          kuda = 3;
          break;
      }
    }
    Wait(2000);
    Acquire(sync);
    numbersOfBalls[kuda] += 1;
    Release(sync);
    /*
    switch(kuda - gde) {
      case 1:
      case -3:
        vperyod();
        break;
      case 2:
      case -2:
        vperyod();
        vperyod();
        break;
      case 3:
      case -1:
        nazad();
        break;
    }
    
    vibros(500 + kuda * 700);
    gde = kuda;
    
    shary[gde] += 1;
    NumOut(0, gde * 8, shary[gde]);

    komuSoobschit = gde;
    */
  }
}
